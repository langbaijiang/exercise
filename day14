1.三数之和
emm，很麻烦的一道题。难点在于如何让确保最终的结果不重复。官方给的题解是，先排序数组，然后确保a<=b<=c,并且每个要的结果在它的循环过程中不与前面数重合，而且，他还优化了时间复杂度，让b从头c从尾，
这样节省了时间复杂度。
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        for(int first=0;first<n;first++){
            int third=n-1,target=-nums[first];
        if(first>0&&nums[first]==nums[first-1])continue;
        for(int second=first+1;second<n;second++){
            if(second>first+1&&nums[second]==nums[second-1])continue;
            while(second<third&&nums[second]+nums[third]>target)third--;
            if(second==third)break;
            if(nums[second]+nums[third]==target)result.push_back({nums[first],nums[second],nums[third]});
        }
        }
        return result;
    }
};
2.长度最小的字数组（连续的）
官方给的解法一是暴力，但超时了。
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int reslut=INT_MAX;
        int n=nums.size();
        if(n==0)return 0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum>=target){reslut=min(reslut,j-i+1);break;}
            }
        }
        return reslut==INT_MAX?0:reslut;
    }
}
下面是最优解————滑动窗口
简单来说，就是strat和end都要动，不停往后咕哝。
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n=nums.size();
        int strat=0,end=0;
        int result=INT_MAX;
        if(n==0)return 0;
        int sum=0;
        while(end<n){
            sum+=nums[end];
            while(sum>=target){
                result=min(result,end-strat+1);
                sum-=nums[strat];
                strat++;
            }
            end++;
        }
        
        return result==INT_MAX?0:result;
    }
};
