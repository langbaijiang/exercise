1.将有序数组转换为二叉搜索树
根本思想是借助中序遍历的原理，再利用分治递归的思想，但这个边界有些难以理解，后续回顾时候重点看看。
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
    return fenzhi(nums,0,nums.size()-1);
    
    }

TreeNode* fenzhi(vector<int>& nums,int left,int right){
    if(left>right)return nullptr;
    int mid=(left+right)/2;
    TreeNode* root=new TreeNode(nums[mid]);
    root->left= fenzhi(nums,left,mid-1);
    root->right=fenzhi(nums,mid+1,right);
    return root;
}
};
2.位1的个数
中心思想：n&（n-1），每次会将n的最低位的1翻为0。位运算真妙啊，这也意味着大部分只能死记硬背，啧。
class Solution {
public:
    int hammingWeight(int n) {
        int count=0;
        while(n){
            n=n&(n-1);
            count++;
        }
        return count;
    }
};
3.只出现一次的数字
emmm，又学到一个新知识———^。a^b^a=a^a^b=b;a^0=a;a^a=0;
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int result=0;
        for(auto c:nums)result=result^c;
        return result;
    }
};
4.爬楼梯
也是做到动态规划的题目了。思想是f(n)=f(n-1)+f(n-2)，原因是每次爬楼梯只能爬1个或者2个，所以最后的就是n-1和n-2的方案之和，然后逐渐递增，不用递归是因为时间超了，所以用循环。
class Solution {
public:
    int climbStairs(int n) {
        int p=1;int q=2;
        if(n==1)return p;
        else if(n==2)return q;
        else{
            int r=0;
            for(int i=3;i<=n;i++){
                r=p+q;
                p=q;
                q=r;
            }
            return r;
        }
    }
};
5.x的平方根
这里用的是二分查找，然后重点是这个（long long)，因为mid*mid的值可能超出int的范围，所以取得范围大一些。
class Solution {
public:
    int mySqrt(int x) {
        int begin=0,end=x,result=-1;
        while(begin<=end){
            int mid=begin+(end-begin)/2;
            if((long long)mid*mid<=x){begin=mid+1;result=mid;}
            else end=mid-1;
        }
        return result;
    }
};
6.加一
那位大佬的思路真清晰，又一次让我意识到自己算法的平庸，所以，早些刷完早些进入下一步。
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        for(int i=digits.size()-1;i>=0;i--){
            digits[i]++;
            digits[i]=digits[i]%10;
            if(digits[i]!=0)return digits;
        }
        vector<int> digits1(digits.size()+1,0);
        digits1[0]=1;
        return digits1;
    }
};
7.回文数
没啥好说的，秒了
class Solution {
public:
    bool isPalindrome(int x) {
        string temp=to_string(x);
        if(x<0)return false;
        int i=0,j=temp.size()-1;
        while(i<=j){
            if(temp[i]!=temp[j])return false;
            i++;j--;
        }
        return true;
    }
};
8.搜索插入位置
二分查找
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int f=0,e=nums.size()-1;
        int result=nums.size();
        while(f<=e){
            int mid=f+(e-f)/2;
            if(nums[mid]>=target){
                e=mid-1;
                result=mid;
            }
            else f=mid+1;
        }
            return result;
    }
};
————————————————————————————————————————————
2025.3.22
面试150题中的简单题也是刷了一遍了，明天周日先把之前题目再复盘复盘，巩固巩固。下周也是week6开始刷中等题，估计头发要一小撮一小撮地掉了。
