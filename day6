1.汇总区间
双指针题目，一开始没想到，一直搁那预估情况
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> result;
        int n=nums.size();
        int i=0;
        string temp;
        while(i<n){
            int low=i;
            i++;
            while(i<n&&nums[i]-1==nums[i-1]){
                i++;
            }
            int high=i-1;
            string temp=(to_string(nums[low]));
            if(low<high){
              temp.append("->");
              temp.append(to_string(nums[high]));  
            }
            result.push_back(move(temp));
        }
        return result;
    }
};
2.有效的括号
呵呵呵，你敢信，这题捣鼓了俩道题的时间都没搞出来，逻辑一直混混沌沌的。
这是deepseek的解法，就是先判断左括号对应的右括号，并将其压入栈，直到遇到字符中的右括号后，判断是否相等，不相等说明匹配失败。这解法有点妙，本俗人问好几遍才懂。
class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for (char c : s) {
            if (c == '(') st.push(')');
            else if (c == '{') st.push('}');
            else if (c == '[') st.push(']');
            else {
                if (st.empty() || st.top() != c) return false;
                st.pop();
            }
        }
        return st.empty(); // 栈空表示所有括号已闭合
    }
};
3.环形链表
呵呵呵，这快二慢一，一循环挺多场景都可应用哈。
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL||head->next==NULL)return false;
        ListNode *fast=head->next;
        ListNode *slow=head;
        while(fast!=NULL&&fast->next!=NULL){
            if(slow==fast)return true;
            fast=fast->next->next;
            slow=slow->next;
        }
        return false;
    }
};
4.合并有序链表
emmm，周日看下虚拟链表的构建，又是一个新鲜知识。
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *p1=list1;
        ListNode *p2=list2;
        ListNode dummy;
        ListNode *temp=&dummy;
        while(p1!=nullptr&&p2!=nullptr){
            if(p1->val>=p2->val){
                temp->next=p2;
                p2=p2->next;

            }
            else{
                temp->next=p1;
                p1=p1->next;
            }
            temp=temp->next;
        }
        temp->next=(p1!=nullptr)?p1:p2;
        return dummy.next;
    }
};
——————————————————————————————————————————————————
2025.3.19
今天也是接触到链表了，下面就是树，图，烧脑的来了。希望能坚持住吧。
