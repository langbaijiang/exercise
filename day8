1.翻转二叉树
又是讨厌的递归，给的的莫名其妙的，还是得问DeepSeek原理
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr)return nullptr;
        TreeNode *right=invertTree(root->right);
        TreeNode *left=invertTree(root->left);
        root->right=left;
        root->left=right;
        return root;
    }
};
2.对称二叉树
呕。又tm是递归
bool check(TreeNode *p,TreeNode *q){
    if(!q&&!p)return true;
    if(!p||!q)return false;
    return p->val==q->val&&check(p->left,q->right)&&check(p->right,q->left);
 }
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return check(root->left,root->right);
    }
};
