1.翻转二叉树
又是讨厌的递归，给的的莫名其妙的，还是得问DeepSeek原理
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr)return nullptr;
        TreeNode *right=invertTree(root->right);
        TreeNode *left=invertTree(root->left);
        root->right=left;
        root->left=right;
        return root;
    }
};
2.对称二叉树
呕。又tm是递归
bool check(TreeNode *p,TreeNode *q){
    if(!q&&!p)return true;
    if(!p||!q)return false;
    return p->val==q->val&&check(p->left,q->right)&&check(p->right,q->left);
 }
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return check(root->left,root->right);
    }
};
3.路经总和
服了，又是递归
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root)return false;
        if(!root->left&&!root->right)return root->val==targetSum;
        return hasPathSum(root->left,targetSum-root->val)||hasPathSum(root->right,targetSum-root->val);
    }
};
4.完全二叉树的节点个数
不管了，直接递归走起，嘿嘿嘿，官方解释太晦涩难懂了
class Solution {
public:
    int countNodes(TreeNode* root) {
        int sum=0;
        if(root==nullptr)return 0;
        return countNodes(root->left)+countNodes(root->right)+1;
        
    }
};
5.二叉树的层平均值
哇哦，我的广搜猜想竟然成立了，我想着之前看到的广搜，然后在中间累加值，并输出平均值，随说在细节方面有不少错误，但总归有进步
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> result;
        queue<TreeNode*> tong;
        tong.push(root);
        while(!tong.empty()){
            double temp1=0.00;double temp2=0.00;
            int sz=tong.size();
            int coung2=sz;
            while(sz>0){
                TreeNode *node=tong.front();tong.pop();
                temp1+=node->val;
                if(node->left){tong.push(node->left);}
                if(node->right){tong.push(node->right);}
                sz-=1;
            }
            temp2=temp1/coung2;
            result.push_back(temp2);
        }
        return result; 
    }
};
