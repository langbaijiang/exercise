1.找多数元素
用的是最优解法——摩尔投票法：多数元素可以运用抵消原则，即票数正负抵消，最后剩下的即为多数元素。
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size(),votes=0,x;
        for(int num:nums){
            if(votes==0)x=num;
            votes=votes+(x==num?1:-1);
        }
        return x;
    }
};
2.买卖股票的最佳时间——单次便利
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minprice=1e9;
        int maxprofit=0;
        for(auto price:prices){
            minprice=min(minprice,price);
            maxprofit=max(maxprofit,price-minprice);
        }
        return maxprofit;
    }
};
3.罗马字数转整数
简单明了的方法：
class Solution {
public:
    int romanToInt(string s) {
    map<string,int> a={{"I",1},{"V",5},{"X",10},{"L",50},{"C",100},{"D",500},{"M",1000},{"IV", 3}, {"IX",8},{"XL", 30}, {"XC",80},{"CD",300}, {"CM", 800}};
             int count=a[s.substr(0,1)];
             for(int i=1;i<s.size();i++){
                string one=s.substr(i,1);
                string two=s.substr(i-1,2);
                count+=a[two]?a[two]:a[one];
             }
             return count;
    }
};
运用关联容器存储相应信息，并在循环中进行几个字数的判断，并且将俩个字符前的值减去，但这种解法空间和时间复杂度都很大，不是最优解。
class Solution {
public:
    int romanToInt(string s) {
    map<char, int> a = {
        {'I', 1},
        {'V', 5},
        {'X', 10},
        {'L', 50},
        {'C', 100},
        {'D', 500},
        {'M', 1000}
    };
    int count=0;
    int n=s.size();
    for(int i=0;i<n;i++){
        if(i<n-1&&a[s[i]]<a[s[i+1]])count-=a[s[i]];
        else count+=a[s[i]];
    }
    return count;
}
};
emmm，这个我也看不出优化在哪，可它时间空间确实优化了，以后得精通了再来备注吧。
4.寻找字符串中的最后一个纯字符
class Solution {
public:
    int lengthOfLastWord(string s) {
        int lastw,lastwf;
        for(int i=s.size()-1;i>=0;i--){
            if(isgraph(s[i])){lastw=i;break;}
        }
        for(int i=lastw;i>=0;i--){
            if(!isgraph(s[i])){lastwf=i;break;}
        }
        return lastw-lastwf;
        
    }
};
这题简单反向遍历，还好。
————————————————————————————————————————————————————————————————————————————————
今天做第一题时候一开始用了双层循环，虽说超时间复杂度了，但至少一下子运行成功，也是一种进步。
草，第三题真烦，光那个不中用的方法就理解了好久，主要涉及关联容器的运用。
