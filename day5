1. 单词规律
这题和昨晚那题很像，都是双map，然后进行验证，虽说是照葫芦画瓢，我依旧花将近一小时，原因是不注重细节，比如添加时候漏了最后一个元素，比如未考虑容量的判断，吃一垫长一智，以后得严谨些。
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        map<char,string> a;
        map<string,char> b;
        vector<string> temp;
        string temp1;
        for(int i=0;i<s.size();i++){
            if(s[i]==' '){
                temp.push_back(temp1);
                temp1="";
            }
            else temp1+=s[i];
        }
        if(s[s.size()-1]!=' ')temp.push_back(temp1);
        if(temp.size()!=pattern.size())return false;
        for(int i=0;i<pattern.size();i++){
        if(a.find(pattern[i])!=a.end()&&a[pattern[i]]!=temp[i]||b.find(temp[i])!=b.end()&&b[temp[i]]!=pattern[i])return false;
        a[pattern[i]]=temp[i];
        b[temp[i]]=pattern[i];
        }
        return true;
    }
};
2.有效的字母异位词
嘿嘿，秒了，一次通过。
class Solution {
public:
    bool isAnagram(string s, string t) {
        map<char,int>tong1,tong2;
        for(auto c:s)tong1[c]+=1;
        for(auto c:t)tong2[c]+=1;
        if(s.size()!=t.size())return false;
        for(int i=0;i<s.size();i++){
            if(tong1[s[i]]!=tong2[s[i]])return false;
        }
        return true;
    }
};
3.求俩数之和
emmm，这题浪费许多时间，也不算浪费吧，至少帮我重新回顾了下关联容器的一些知识，还有哦，以后要用unordered_map,map就别用了
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> tong;
        vector<int> result;
        for(int i=0;i<nums.size();i++)tong[nums[i]]=i;
        for(int i=0;i<nums.size();i++){
            int temp=target-nums[i];
            if(tong.find(temp)!=tong.end()&&i!=tong[temp]){result.push_back(tong[temp]);
            result.push_back(i);
            return result;}
        }
        return {};
    }
};
4.快乐数
好好好，尽搁简单题提出新概念。快慢指诊————当慢指针走一次，快指针走俩次，此时俩指诊重合时，构成一个循环。至于快乐数，就是当一次循环后，和为1即是快乐数。
md，幸亏没死磕。要死磕不知得浪费多久时间。
int Sum(int n){
    int sum=0;
    while(n>0){
        int temp=n%10;
        sum+=temp*temp;
        n/=10;
    }
    return sum;
}
class Solution {
public:
    bool isHappy(int n) {
        int fast=n,low=n;
        do{
        low=Sum(low);
        fast=Sum(fast);
        fast=Sum(fast);
    }while(low!=fast);
    return low==1;
    }
};
